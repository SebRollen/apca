#![warn(missing_docs)]
//! apca-rest
//!
//! Crate for interacting with the online brokerage [Alpaca](https://alpaca.markets).
//! This crate implements all of Alpaca's REST endpoints as structs, and maps those requests to
//! their correct responses in a strongly typed fashion.
//!
//! There are multiple examples included in the examples folder.
//! <p style="background:rgba(255,181,77,0.16);padding:0.75em;">
//! <strong>Warning:</strong> Make sure to read through the examples carefully before executing
//! as some of them can affect your Alpaca paper-trading account.
//! </p>
use vila::Client;

/// The account API serves important information related to an account, including account status,
/// funds available for trade, funds available for withdrawal, and various flags relevant to an
/// account’s ability to trade. An account maybe be blocked for just for trades (trades_blocked
/// flag) or for both trades and transfers (account_blocked flag) if Alpaca identifies the account
/// to engaging in any suspicious activity. Also, in accordance with FINRA’s pattern day trading
/// rule, an account may be flagged for pattern day trading (pattern_day_trader flag), which would
/// inhibit an account from placing any further day-trades. Please note that cryptocurrencies are
/// not eligible assets to be used as collateral for margin accounts and will require the asset be
/// traded using cash only.
pub mod account;
/// The account activities API provides access to a historical record of transaction activities
/// that have impacted your account. Trade execution activities and non-trade activities, such as
/// dividend payments, are both reported through this endpoint.
pub mod account_activities;
/// The account configuration API provides custom configurations about your trading account
/// settings. These configurations control various allow you to modify settings to suit your
/// trading needs.
pub mod account_configurations;
/// The assets API serves as the master list of assets available for trade and data consumption
/// from Alpaca. Assets are sorted by asset class, exchange and symbol. Some assets are only
/// available for data consumption via Polygon, and are not tradable with Alpaca. These assets will
/// be marked with the flag `tradable=false`.
//TODO: Check with Alpaca whether the nontradable assets are still being returned?
pub mod assets;
/// The calendar API serves the full list of market days from 1970 to 2029. It can also be queried
/// by specifying a start and/or end time to narrow down the results. In addition to the dates, the
/// response also contains the specific open and close times for the market days, taking into
/// account early closures.
pub mod calendar;
/// The clock API serves the current market timestamp, whether or not the market is currently open,
/// as well as the times of the next market open and close.
pub mod clock;
mod common;
/// The Orders API allows a user to monitor, place and cancel their orders with Alpaca. Each order
/// has a unique identifier provided by the client. This client-side unique order ID will be
/// automatically generated by the system if not provided by the client, and will be returned as
/// part of the order object along with the rest of the fields described below. Once an order is
/// placed, it can be queried using the client-side order ID to check the status. Updates on open
/// orders at Alpaca will also be sent over the streaming interface, which is the recommended
/// method of maintaining order state.
pub mod orders;
/// The portfolio history API returns the timeseries data for equity and profit loss information of
/// the account.
pub mod portfolio_history;
/// The positions API provides information about an account’s current open positions. The response
/// will include information such as cost basis, shares traded, and market value, which will be
/// updated live as price information is updated. Once a position is closed, it will no longer be
/// queryable through this API.
pub mod positions;
mod utils;
/// The watchlist API provides CRUD operation for the account’s watchlist. An account can have
/// multiple watchlists and each is uniquely identified by `id` but can also be addressed by
/// user-defined `name`. Each watchlist is an ordered list of assets.
pub mod watchlists;

pub use common::*;

/// Create a REST client for interacting with a paper Alpaca account.
pub fn paper_client<T: AsRef<str>>(key: T, secret: T) -> Client {
    Client::new("https://paper-api.alpaca.markets").header_auth(vec![
        ("apca-api-key-id", key.as_ref()),
        ("apca-api-secret-key", secret.as_ref()),
    ])
}

/// Create a REST client for interacting with a live Alpaca account.
pub fn live_client<T: AsRef<str>>(key: T, secret: T) -> Client {
    Client::new("https://api.alpaca.markets").header_auth(vec![
        ("apca-api-key-id", key.as_ref()),
        ("apca-api-secret-key", secret.as_ref()),
    ])
}

/// Create a REST client for interacting with an Alpaca account. Usually, `live_client` and
/// `paper_client` can be used, but if you need to send the requests to a domain other than the
/// standard Alpaca URLs, this function allows you to change the base URL.
pub fn client_with_url(url: &str, key: &str, secret: &str) -> Client {
    Client::new(url).header_auth(vec![
        ("apca-api-key-id", key),
        ("apca-api-secret-key", secret),
    ])
}
